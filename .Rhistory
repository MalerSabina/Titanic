clear
seq(5, -5, by=2)
seq(5, -5, by=-2)
just_fives <- rep(5, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(5, 5)
just_fives <- rep(5, 5)
just_fives <- rep(5, 5)
just_fives <- rep(5, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
just_fives <- rep(just_fives, 5)
rep(1:10, 1:10)
mode(rep("Julien", 5))
rep("Julien", 5)
c <- rep("Julien", 5)
c
c <- rep(5, 5, length=10)
c <- rep(5, 5)
my_sequence <- seq(5, 19, length=20)
my_sequence
my_sequence <- seq(5, 19, length=5)
names(my_sequence) <- rep("hello", length(my_sequence))
my_sequence
my_sequence <- seq(5, 19, length=78)
my_sequence
names(my_sequence) <- rep("numeric", length(my_sequence))
my_sequence
data <- read_csv("/Users/Julien/Downloads/Iris.csv")
library(readr)
data <- read_csv("/Users/Julien/Downloads/Iris.csv")
View(data)
View(data.entry())
View(data.entry("Id"))
mode(my_sequence)
mode(names(my_sequence))
names(my_sequence)
my_sequence[seq(1, 78, by=3)]
seq(1,78, by=3)
my_sequence[my_sequence % 2 == 0]
my_sequence[my_sequence / 2 == 0]
my_sequence[my_sequence > 3]
my_sequence[1999]
my_sequence <- 1:10
i_dont_want <- my_sequence[my_sequence < 5]
my_sequence[-i_dont_want]
mode(pi)
length(pi)
pi
LETTERS
LETTERS[seq(1, length(LETTERS), by=2)]
seq(2, length(LETTERS), by=2)
LETTERS[seq(2, length(LETTERS), by=2)]
length(LETTERS)
LETTERS[1:4]
LETTERS[-1:4]
LETTERS[-(1:4)]
vector <- c(1:9, 9)
names(vector) <- LETTERS[1:10]
vector
vector[c(1, -1)]
vector[c(1, length(vector))]
vector[vector > 3]
vector[vector > 2 & vector < 7]
vector[vector >= 2 & vector <= 7]
vector [vector != 5]
vector[c("A","B","D")]
"A" > "B"
names(vector)
names(vector) < H
names(vector) < "H"
vector[names(vector) < "H"]
cbind(1:10, c(1,2,3), 1)
rbind(1:10, c(1,2,3), 1)
matrix(1:10, nrow=5, ncol=5)
my_matrix <- matrix(1:10, nrow=5)
my_matrix
my_matrix <- matrix(1:10, nrow=5, ncol=5)
my_matrix
length(matrix)
length(my_matrix)
dimensions <- dim(my_matrix)
dimensions
# 5 rows, 5 columns
dimnames(my_matrix) <- list(1:5, 1:5)
my_matrix
LETTERS[1:5]
dimnames(my_matrix) <- list(LETTERS[1:5], letters[1:5])
my_matrix
dimnames(my_matrix) <- list(letters[1:5], LETTERS[1:5])
my_matrix
my_sequence
names(my_sequence) <- LETTERS[1:length(my_sequence)]
my_sequence
dimnames(my_matrix)
my_matrix[1:2,1:2]
my_matrix[1:2,1:3]
c <- c(1,2,3,4)
View(my_matrix)
my_matrix
View(my_matrix)
my_matrix[c('a','b'), c('A')]
my_matrix[c('a','b'), c('A'), drop=FALSE]
my_matrix[ , -2]
my_matrix[ , 1]
array(vector(1,2,3), dim = c(1,2))
array(c(1,2,3), dim = c(1,2))
vector <- 1:10
array(vector, dim = c(5,2,3))
my_array <- array(vector, dim(3, 3, 3))
my_array <- array(vector, dim(c(3,3,3)))
my_array <- array(vector, dim = c(3,3,3)
)
my_array
dimnames(my_array) <- list(LETTERS[1:nrow(my_array)], letters[1:ncol(my_array)], c('array1', 'array2', 'array3'))
my_array
my_array[1, 3, 1:3]
my_array[1, 3, 1:3, drop=FALSE]
my_array[1, :3, 1:3, drop=FALSE]
my_array[1, 1:3, 1:3, drop=FALSE]
my_array[1, 1:3, 1:3]
my_array[1:2, 1:3, 1:3]
rbind(c(1,2,3,4))
cbind(c(1,2,3,4))
cbind(c(1,2,3,4), 1:4)
c
del(c)
my_array
my_array[2, 1:3, , drop=FALSE]
library(readr)
data <- read_csv("/Users/Julien/Downloads/Iris.csv", header=TRUE)
data <- read_csv("/Users/Julien/Downloads/Iris.csv")
data$Id
View(data)
describe(data)
library(psych)
install.packages("psych")
library(psych)
describe(data)
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
barplot(1:20)
vector <- 1:20
names(vector) <- c("1", 2:20)
barplot(vector)
vector
c("1", 2:20)
sqrt(vector)
volcano
contour(volcano)
perps(volcano, expand=0.2)
persp(volcano, expand=0.2)
matrix(1:100, 10, 10)
m <- matrix(1:100, 10, 10)
contour(m)
persp(m, expand=0.2)
image(volcano)
matrix[3:4,]
matrix[3:4, :]
m[3:5,]
m[, 3:5]
clear
clr()
clear()
my_vector <- c(1,1,2,2,2,2,4,4,4,5,5,5,3)
factor(my_vector)
levels(factor(my_vector))
as.integer(factor(my_vector))
swirl()
swirl
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function!")
boring_function()
boring_function
View(boring_function)
View(boring_function)
View(boring_function)
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluation(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hi i'm just Julien")
quit()
getwd
getwd()
setwd
setwd("/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic")
data <- read.csv("../datasets/train-edited.csv")
data <- read.csv("../datasets/train-edited.csv")
data <- read.csv("../datasets/train-edited.csv")
data <- read.csv("/datasets/train-edited.csv")
data <- read.csv("/datasets/train_edited.csv")
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
data <- read.csv("../datasets/train_edited.csv")
library(readr)
train_edited <- read_csv("/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/datasets/train_edited.csv")
View(train_edited)
View(train_edited)
View(train_edited)
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/visualizations/find_patterns.r')
sd(train_edited$Fare)
sd(train_edited$Fare)
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/finding_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/finding_patterns.r')
sd(train_edited$Fare)
package(ggplot2)
sd(train_edited$Fare)
print(two_sd_over)
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/finding_patterns.r')
source('/Volumes/SWIFT/Google Drive/Programming/Multi language Projects/Titanic/finding_patterns.r', echo=TRUE)
standard_dev <- sd(train_edited$Fare)
two_sd_over <- mean(train_edited$Fare) + 2*standard_dev
print(two_sd_over)
print(two_sd_over)
print("test")
print("test")
rich_fares <- train_edited$Fare[train_edit$Fare > two_sd_over]
rich_ages <- train_edited$Age[train_edited$Fare > two_sd_over]
rich_fares <- train_edited$Fare[train_edited$Fare > two_sd_over]
rich_ages <- train_edited$Age[train_edited$Fare > two_sd_over]
View(rich_ages)
gplot(rich_fares, rich_ages)
qplot(rich_fares, rich_ages)
# collect the fares that are greater than 2 standard deviations above the mean
library(ggplot2)
standard_dev <- sd(train_edited$Fare)
two_sd_over <- mean(train_edited$Fare) + 2*standard_dev
rich_fares <- train_edited$Fare[train_edited$Fare > two_sd_over]
rich_ages <- train_edited$Age[train_edited$Fare > two_sd_over]
qplot(rich_fares, rich_ages)
ggplot2::qplot(rich_fares, rich_ages)
# collect the fares that are greater than 2 standard deviations above the mean
install.packages(ggplot2)
library(ggplot2)
standard_dev <- sd(train_edited$Fare)
two_sd_over <- mean(train_edited$Fare) + 2*standard_dev
rich_fares <- train_edited$Fare[train_edited$Fare > two_sd_over]
rich_ages <- train_edited$Age[train_edited$Fare > two_sd_over]
qplot(rich_fares, rich_ages)
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# collect the fares that are greater than 2 standard deviations above the mean
library(ggplot2)
standard_dev <- sd(train_edited$Fare)
two_sd_over <- mean(train_edited$Fare) + 2*standard_dev
rich_fares <- train_edited$Fare[train_edited$Fare > two_sd_over]
rich_ages <- train_edited$Age[train_edited$Fare > two_sd_over]
qplot(rich_fares, rich_ages)
qplot(rich_ages, rich_fares)
length(rich_ages)
